
keypadcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002e80  08002e80  00003e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f08  08002f08  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f08  08002f08  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f08  08002f08  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f08  08002f08  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f0c  08002f0c  00003f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f10  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  08002f1c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002f1c  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f696  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217a  00000000  00000000  000136ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00015848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a04  00000000  00000000  00016508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181e7  00000000  00000000  00016f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001138a  00000000  00000000  0002f0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ad0  00000000  00000000  0004047d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9f4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dac  00000000  00000000  000d9f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dcd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e68 	.word	0x08002e68

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002e68 	.word	0x08002e68

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fc20 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f80c 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f972 	bl	80006e0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80003fc:	f000 f866 	bl	80004cc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000400:	f000 f8a4 	bl	800054c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000404:	f000 f8e0 	bl	80005c8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000408:	f000 f91c 	bl	8000644 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	e7fd      	b.n	800040c <main+0x20>

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b093      	sub	sp, #76	@ 0x4c
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	2410      	movs	r4, #16
 8000418:	193b      	adds	r3, r7, r4
 800041a:	0018      	movs	r0, r3
 800041c:	2338      	movs	r3, #56	@ 0x38
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f002 fcf5 	bl	8002e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000426:	003b      	movs	r3, r7
 8000428:	0018      	movs	r0, r3
 800042a:	2310      	movs	r3, #16
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f002 fcee 	bl	8002e10 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	0018      	movs	r0, r3
 800043a:	f001 f813 	bl	8001464 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043e:	193b      	adds	r3, r7, r4
 8000440:	2202      	movs	r2, #2
 8000442:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000444:	193b      	adds	r3, r7, r4
 8000446:	2280      	movs	r2, #128	@ 0x80
 8000448:	0052      	lsls	r2, r2, #1
 800044a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800044c:	0021      	movs	r1, r4
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2240      	movs	r2, #64	@ 0x40
 8000458:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2202      	movs	r2, #2
 800045e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2202      	movs	r2, #2
 8000464:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2208      	movs	r2, #8
 8000470:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	0292      	lsls	r2, r2, #10
 8000478:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2280      	movs	r2, #128	@ 0x80
 800047e:	0492      	lsls	r2, r2, #18
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2280      	movs	r2, #128	@ 0x80
 8000486:	0592      	lsls	r2, r2, #22
 8000488:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	187b      	adds	r3, r7, r1
 800048c:	0018      	movs	r0, r3
 800048e:	f001 f835 	bl	80014fc <HAL_RCC_OscConfig>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000496:	f000 f9df 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	003b      	movs	r3, r7
 800049c:	2207      	movs	r2, #7
 800049e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2202      	movs	r2, #2
 80004a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b2:	003b      	movs	r3, r7
 80004b4:	2102      	movs	r1, #2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fb3a 	bl	8001b30 <HAL_RCC_ClockConfig>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004c0:	f000 f9ca 	bl	8000858 <Error_Handler>
  }
}
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b013      	add	sp, #76	@ 0x4c
 80004ca:	bd90      	pop	{r4, r7, pc}

080004cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000544 <MX_I2C2_Init+0x78>)
 80004d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 80004d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000548 <MX_I2C2_Init+0x7c>)
 80004da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e2:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e8:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004ee:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f4:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <MX_I2C2_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <MX_I2C2_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <MX_I2C2_Init+0x74>)
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fe6d 	bl	80011e8 <HAL_I2C_Init>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000512:	f000 f9a1 	bl	8000858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <MX_I2C2_Init+0x74>)
 8000518:	2100      	movs	r1, #0
 800051a:	0018      	movs	r0, r3
 800051c:	f000 ff0a 	bl	8001334 <HAL_I2CEx_ConfigAnalogFilter>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000524:	f000 f998 	bl	8000858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <MX_I2C2_Init+0x74>)
 800052a:	2100      	movs	r1, #0
 800052c:	0018      	movs	r0, r3
 800052e:	f000 ff4d 	bl	80013cc <HAL_I2CEx_ConfigDigitalFilter>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000536:	f000 f98f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000028 	.word	0x20000028
 8000544:	40005800 	.word	0x40005800
 8000548:	10b17db5 	.word	0x10b17db5

0800054c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000552:	4a1c      	ldr	r2, [pc, #112]	@ (80005c4 <MX_SPI1_Init+0x78>)
 8000554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000558:	2282      	movs	r2, #130	@ 0x82
 800055a:	0052      	lsls	r2, r2, #1
 800055c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000566:	22e0      	movs	r2, #224	@ 0xe0
 8000568:	00d2      	lsls	r2, r2, #3
 800056a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056c:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_SPI1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000572:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_SPI1_Init+0x74>)
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_SPI1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_SPI1_Init+0x74>)
 800059a:	2207      	movs	r2, #7
 800059c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_SPI1_Init+0x74>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005aa:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <MX_SPI1_Init+0x74>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 fdf1 	bl	8002194 <HAL_SPI_Init>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005b6:	f000 f94f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	40013000 	.word	0x40013000

080005c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_SPI2_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <MX_SPI2_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_SPI2_Init+0x74>)
 80005d4:	2282      	movs	r2, #130	@ 0x82
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005da:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_SPI2_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e0:	4b16      	ldr	r3, [pc, #88]	@ (800063c <MX_SPI2_Init+0x74>)
 80005e2:	22e0      	movs	r2, #224	@ 0xe0
 80005e4:	00d2      	lsls	r2, r2, #3
 80005e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_SPI2_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_SPI2_Init+0x74>)
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	0092      	lsls	r2, r2, #2
 80005fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_SPI2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_SPI2_Init+0x74>)
 8000616:	2207      	movs	r2, #7
 8000618:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_SPI2_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_SPI2_Init+0x74>)
 8000622:	2208      	movs	r2, #8
 8000624:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <MX_SPI2_Init+0x74>)
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fdb3 	bl	8002194 <HAL_SPI_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f911 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000e0 	.word	0x200000e0
 8000640:	40003800 	.word	0x40003800

08000644 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000648:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 800064a:	4a24      	ldr	r2, [pc, #144]	@ (80006dc <MX_USART3_UART_Init+0x98>)
 800064c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800064e:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 8000650:	22e1      	movs	r2, #225	@ 0xe1
 8000652:	0252      	lsls	r2, r2, #9
 8000654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fe38 	bl	8002304 <HAL_UART_Init>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000698:	f000 f8de 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 800069e:	2100      	movs	r1, #0
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 fad5 	bl	8002c50 <HAL_UARTEx_SetTxFifoThreshold>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80006aa:	f000 f8d5 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 fb0c 	bl	8002cd0 <HAL_UARTEx_SetRxFifoThreshold>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80006bc:	f000 f8cc 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <MX_USART3_UART_Init+0x94>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 fa8a 	bl	8002bdc <HAL_UARTEx_DisableFifoMode>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80006cc:	f000 f8c4 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	20000144 	.word	0x20000144
 80006dc:	40004800 	.word	0x40004800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b089      	sub	sp, #36	@ 0x24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	240c      	movs	r4, #12
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2314      	movs	r3, #20
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f002 fb8d 	bl	8002e10 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b53      	ldr	r3, [pc, #332]	@ (8000844 <MX_GPIO_Init+0x164>)
 80006f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006fa:	4b52      	ldr	r3, [pc, #328]	@ (8000844 <MX_GPIO_Init+0x164>)
 80006fc:	2102      	movs	r1, #2
 80006fe:	430a      	orrs	r2, r1
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
 8000702:	4b50      	ldr	r3, [pc, #320]	@ (8000844 <MX_GPIO_Init+0x164>)
 8000704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000706:	2202      	movs	r2, #2
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b4d      	ldr	r3, [pc, #308]	@ (8000844 <MX_GPIO_Init+0x164>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000712:	4b4c      	ldr	r3, [pc, #304]	@ (8000844 <MX_GPIO_Init+0x164>)
 8000714:	2104      	movs	r1, #4
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
 800071a:	4b4a      	ldr	r3, [pc, #296]	@ (8000844 <MX_GPIO_Init+0x164>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071e:	2204      	movs	r2, #4
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b47      	ldr	r3, [pc, #284]	@ (8000844 <MX_GPIO_Init+0x164>)
 8000728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800072a:	4b46      	ldr	r3, [pc, #280]	@ (8000844 <MX_GPIO_Init+0x164>)
 800072c:	2101      	movs	r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	635a      	str	r2, [r3, #52]	@ 0x34
 8000732:	4b44      	ldr	r3, [pc, #272]	@ (8000844 <MX_GPIO_Init+0x164>)
 8000734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEYPAD_BUZZER_GPIO_Port, KEYPAD_BUZZER_Pin, GPIO_PIN_RESET);
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	4841      	ldr	r0, [pc, #260]	@ (8000848 <MX_GPIO_Init+0x168>)
 8000744:	2200      	movs	r2, #0
 8000746:	0019      	movs	r1, r3
 8000748:	f000 fd30 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500PMODE2_Pin|GPIO_W5500RST_Pin|SPI2_CS_Pin|GPIO_RELAY_Pin
 800074c:	493f      	ldr	r1, [pc, #252]	@ (800084c <MX_GPIO_Init+0x16c>)
 800074e:	23a0      	movs	r3, #160	@ 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2200      	movs	r2, #0
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fd29 	bl	80011ac <HAL_GPIO_WritePin>
                          |GPIO_W5500PMODE0_Pin|SPI1_NSS_2_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_W5500PMODE1_GPIO_Port, GPIO_W5500PMODE1_Pin, GPIO_PIN_RESET);
 800075a:	4b3d      	ldr	r3, [pc, #244]	@ (8000850 <MX_GPIO_Init+0x170>)
 800075c:	2200      	movs	r2, #0
 800075e:	2101      	movs	r1, #1
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fd23 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_SWITCH1_Pin GPIO_PIR_Pin */
  GPIO_InitStruct.Pin = GPIO_SWITCH1_Pin|GPIO_PIR_Pin;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	4a3a      	ldr	r2, [pc, #232]	@ (8000854 <MX_GPIO_Init+0x174>)
 800076a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000778:	193b      	adds	r3, r7, r4
 800077a:	4a33      	ldr	r2, [pc, #204]	@ (8000848 <MX_GPIO_Init+0x168>)
 800077c:	0019      	movs	r1, r3
 800077e:	0010      	movs	r0, r2
 8000780:	f000 fba8 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEYPAD_BUZZER_Pin */
  GPIO_InitStruct.Pin = KEYPAD_BUZZER_Pin;
 8000784:	0021      	movs	r1, r4
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	0212      	lsls	r2, r2, #8
 800078c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	000c      	movs	r4, r1
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2201      	movs	r2, #1
 8000794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(KEYPAD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	4a28      	ldr	r2, [pc, #160]	@ (8000848 <MX_GPIO_Init+0x168>)
 80007a6:	0019      	movs	r1, r3
 80007a8:	0010      	movs	r0, r2
 80007aa:	f000 fb93 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_W5500PMODE2_Pin GPIO_W5500RST_Pin SPI2_CS_Pin GPIO_RELAY_Pin
                           GPIO_W5500PMODE0_Pin SPI1_NSS_2_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500PMODE2_Pin|GPIO_W5500RST_Pin|SPI2_CS_Pin|GPIO_RELAY_Pin
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	4a26      	ldr	r2, [pc, #152]	@ (800084c <MX_GPIO_Init+0x16c>)
 80007b2:	601a      	str	r2, [r3, #0]
                          |GPIO_W5500PMODE0_Pin|SPI1_NSS_2_Pin|SPI1_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	193a      	adds	r2, r7, r4
 80007c8:	23a0      	movs	r3, #160	@ 0xa0
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fb80 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_W5500PMODE1_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500PMODE1_Pin;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2201      	movs	r2, #1
 80007de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_W5500PMODE1_GPIO_Port, &GPIO_InitStruct);
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_GPIO_Init+0x170>)
 80007f0:	0019      	movs	r1, r3
 80007f2:	0010      	movs	r0, r2
 80007f4:	f000 fb6e 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_INT_Pin GPIO_REEDSWITCH_Pin GPIO_SWITCH3_Pin GPIO_SWITCH2_Pin */
  GPIO_InitStruct.Pin = KEYPAD_INT_Pin|GPIO_REEDSWITCH_Pin|GPIO_SWITCH3_Pin|GPIO_SWITCH2_Pin;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	22c6      	movs	r2, #198	@ 0xc6
 80007fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <MX_GPIO_Init+0x170>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f000 fb5f 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TAMPERSWITCH1_Pin GPIO_TAMPERSWITCH2_Pin */
  GPIO_InitStruct.Pin = GPIO_TAMPERSWITCH1_Pin|GPIO_TAMPERSWITCH2_Pin;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22c0      	movs	r2, #192	@ 0xc0
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	187a      	adds	r2, r7, r1
 800082e:	23a0      	movs	r3, #160	@ 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fb4d 	bl	8000ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b009      	add	sp, #36	@ 0x24
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40021000 	.word	0x40021000
 8000848:	50000800 	.word	0x50000800
 800084c:	000090e6 	.word	0x000090e6
 8000850:	50000400 	.word	0x50000400
 8000854:	00004040 	.word	0x00004040

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_MspInit+0x4c>)
 800086c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	641a      	str	r2, [r3, #64]	@ 0x40
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	0549      	lsls	r1, r1, #21
 800088c:	430a      	orrs	r2, r1
 800088e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000892:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	055b      	lsls	r3, r3, #21
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800089e:	23c0      	movs	r3, #192	@ 0xc0
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fa4c 	bl	8000d40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b095      	sub	sp, #84	@ 0x54
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	233c      	movs	r3, #60	@ 0x3c
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	0018      	movs	r0, r3
 80008c2:	2314      	movs	r3, #20
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f002 faa2 	bl	8002e10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	2410      	movs	r4, #16
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	0018      	movs	r0, r3
 80008d2:	232c      	movs	r3, #44	@ 0x2c
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 fa9a 	bl	8002e10 <memset>
  if(hi2c->Instance==I2C2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a2f      	ldr	r2, [pc, #188]	@ (80009a0 <HAL_I2C_MspInit+0xec>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d158      	bne.n	8000998 <HAL_I2C_MspInit+0xe4>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2240      	movs	r2, #64	@ 0x40
 80008ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fac5 	bl	8001e84 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008fe:	f7ff ffab 	bl	8000858 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <HAL_I2C_MspInit+0xf0>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <HAL_I2C_MspInit+0xf0>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	@ 0x34
 800090e:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <HAL_I2C_MspInit+0xf0>)
 8000910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA10     ------> I2C2_SDA
    PA11 [PA9]     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800091a:	213c      	movs	r1, #60	@ 0x3c
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000924:	000c      	movs	r4, r1
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2212      	movs	r2, #18
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2208      	movs	r2, #8
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	193a      	adds	r2, r7, r4
 8000940:	23a0      	movs	r3, #160	@ 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fac4 	bl	8000ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800094c:	0021      	movs	r1, r4
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2280      	movs	r2, #128	@ 0x80
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2212      	movs	r2, #18
 800095a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2206      	movs	r2, #6
 800096c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	187a      	adds	r2, r7, r1
 8000970:	23a0      	movs	r3, #160	@ 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 faac 	bl	8000ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_I2C_MspInit+0xf0>)
 800097e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_I2C_MspInit+0xf0>)
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	03c9      	lsls	r1, r1, #15
 8000986:	430a      	orrs	r2, r1
 8000988:	63da      	str	r2, [r3, #60]	@ 0x3c
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_I2C_MspInit+0xf0>)
 800098c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800098e:	2380      	movs	r3, #128	@ 0x80
 8000990:	03db      	lsls	r3, r3, #15
 8000992:	4013      	ands	r3, r2
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b015      	add	sp, #84	@ 0x54
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	40005800 	.word	0x40005800
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b08d      	sub	sp, #52	@ 0x34
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	241c      	movs	r4, #28
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	0018      	movs	r0, r3
 80009b6:	2314      	movs	r3, #20
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f002 fa28 	bl	8002e10 <memset>
  if(hspi->Instance==SPI1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a42      	ldr	r2, [pc, #264]	@ (8000ad0 <HAL_SPI_MspInit+0x128>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d130      	bne.n	8000a2c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ca:	4b42      	ldr	r3, [pc, #264]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 80009cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ce:	4b41      	ldr	r3, [pc, #260]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0149      	lsls	r1, r1, #5
 80009d4:	430a      	orrs	r2, r1
 80009d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80009d8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 80009da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	015b      	lsls	r3, r3, #5
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ea:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 80009ec:	2102      	movs	r1, #2
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f2:	4b38      	ldr	r3, [pc, #224]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f6:	2202      	movs	r2, #2
 80009f8:	4013      	ands	r3, r2
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009fe:	0021      	movs	r1, r4
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2238      	movs	r2, #56	@ 0x38
 8000a04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2202      	movs	r2, #2
 8000a0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad8 <HAL_SPI_MspInit+0x130>)
 8000a22:	0019      	movs	r1, r3
 8000a24:	0010      	movs	r0, r2
 8000a26:	f000 fa55 	bl	8000ed4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a2a:	e04c      	b.n	8000ac6 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <HAL_SPI_MspInit+0x134>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d147      	bne.n	8000ac6 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a36:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	01c9      	lsls	r1, r1, #7
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	01db      	lsls	r3, r3, #7
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <HAL_SPI_MspInit+0x12c>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000a6a:	241c      	movs	r4, #28
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2209      	movs	r2, #9
 8000a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2202      	movs	r2, #2
 8000a76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	193a      	adds	r2, r7, r4
 8000a8c:	23a0      	movs	r3, #160	@ 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fa1e 	bl	8000ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a98:	0021      	movs	r1, r4
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	187a      	adds	r2, r7, r1
 8000aba:	23a0      	movs	r3, #160	@ 0xa0
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 fa07 	bl	8000ed4 <HAL_GPIO_Init>
}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b00d      	add	sp, #52	@ 0x34
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	50000400 	.word	0x50000400
 8000adc:	40003800 	.word	0x40003800

08000ae0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b095      	sub	sp, #84	@ 0x54
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	233c      	movs	r3, #60	@ 0x3c
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	0018      	movs	r0, r3
 8000aee:	2314      	movs	r3, #20
 8000af0:	001a      	movs	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f002 f98c 	bl	8002e10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	2410      	movs	r4, #16
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	232c      	movs	r3, #44	@ 0x2c
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f002 f984 	bl	8002e10 <memset>
  if(huart->Instance==USART3)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a22      	ldr	r2, [pc, #136]	@ (8000b98 <HAL_UART_MspInit+0xb8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d13e      	bne.n	8000b90 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2204      	movs	r2, #4
 8000b16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 f9af 	bl	8001e84 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b2a:	f7ff fe95 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	02c9      	lsls	r1, r1, #11
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	02db      	lsls	r3, r3, #11
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b50:	2102      	movs	r1, #2
 8000b52:	430a      	orrs	r2, r1
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_UART_MspInit+0xbc>)
 8000b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_RX
    PB8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b62:	213c      	movs	r1, #60	@ 0x3c
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	22c0      	movs	r2, #192	@ 0xc0
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2202      	movs	r2, #2
 8000b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2204      	movs	r2, #4
 8000b82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <HAL_UART_MspInit+0xc0>)
 8000b88:	0019      	movs	r1, r3
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	f000 f9a2 	bl	8000ed4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b015      	add	sp, #84	@ 0x54
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	40004800 	.word	0x40004800
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	50000400 	.word	0x50000400

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f89c 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be4:	f7ff fff7 	bl	8000bd6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	@ (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	@ (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0e:	f002 f907 	bl	8002e20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c12:	f7ff fbeb 	bl	80003ec <main>

08000c16 <LoopForever>:

LoopForever:
  b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	08002f10 	.word	0x08002f10
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	200001dc 	.word	0x200001dc

08000c30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x3c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_Init+0x3c>)
 8000c46:	2180      	movs	r1, #128	@ 0x80
 8000c48:	0049      	lsls	r1, r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f000 f810 	bl	8000c74 <HAL_InitTick>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe00 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <HAL_InitTick+0x88>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d02b      	beq.n	8000ce4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <HAL_InitTick+0x8c>)
 8000c8e:	681c      	ldr	r4, [r3, #0]
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <HAL_InitTick+0x88>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	0019      	movs	r1, r3
 8000c96:	23fa      	movs	r3, #250	@ 0xfa
 8000c98:	0098      	lsls	r0, r3, #2
 8000c9a:	f7ff fa31 	bl	8000100 <__udivsi3>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fa2c 	bl	8000100 <__udivsi3>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 f905 	bl	8000eba <HAL_SYSTICK_Config>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d112      	bne.n	8000cda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d80a      	bhi.n	8000cd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	425b      	negs	r3, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f8e4 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_InitTick+0x90>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e00d      	b.n	8000cec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e008      	b.n	8000cec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cda:	230f      	movs	r3, #15
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e003      	b.n	8000cec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b005      	add	sp, #20
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	001a      	movs	r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <HAL_IncTick+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	18d2      	adds	r2, r2, r3
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_IncTick+0x20>)
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200001d8 	.word	0x200001d8

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b02      	ldr	r3, [pc, #8]	@ (8000d3c <HAL_GetTick+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	200001d8 	.word	0x200001d8

08000d40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	0019      	movs	r1, r3
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	40010000 	.word	0x40010000
 8000d68:	fffff9ff 	.word	0xfffff9ff

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d80:	d828      	bhi.n	8000dd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <__NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	33c0      	adds	r3, #192	@ 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	@ 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	@ 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	481f      	ldr	r0, [pc, #124]	@ (8000e40 <__NVIC_SetPriority+0xd4>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	33c0      	adds	r3, #192	@ 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dd2:	e031      	b.n	8000e38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <__NVIC_SetPriority+0xd8>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	230f      	movs	r3, #15
 8000dde:	400b      	ands	r3, r1
 8000de0:	3b08      	subs	r3, #8
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	@ 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	@ 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001c      	movs	r4, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	3306      	adds	r3, #6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	045b      	lsls	r3, r3, #17
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d301      	bcc.n	8000e60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e010      	b.n	8000e82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <SysTick_Config+0x44>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff7c 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <SysTick_Config+0x44>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SysTick_Config+0x44>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	1c02      	adds	r2, r0, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ffbf 	bl	8000e48 <SysTick_Config>
 8000eca:	0003      	movs	r3, r0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e14d      	b.n	8001180 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x28>
 8000efa:	e13e      	b.n	800117a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	58d3      	ldr	r3, [r2, r3]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2107      	movs	r1, #7
 8000fea:	400b      	ands	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	401a      	ands	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	23c0      	movs	r3, #192	@ 0xc0
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x174>
 8001046:	e098      	b.n	800117a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001048:	4a53      	ldr	r2, [pc, #332]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3318      	adds	r3, #24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	589b      	ldr	r3, [r3, r2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	23a0      	movs	r3, #160	@ 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	429a      	cmp	r2, r3
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0x1d6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a48      	ldr	r2, [pc, #288]	@ (800119c <HAL_GPIO_Init+0x2c8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x1d2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a47      	ldr	r2, [pc, #284]	@ (80011a0 <HAL_GPIO_Init+0x2cc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x1ce>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a46      	ldr	r2, [pc, #280]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x1ca>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a45      	ldr	r2, [pc, #276]	@ (80011a8 <HAL_GPIO_Init+0x2d4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x1c6>
 8001096:	2304      	movs	r3, #4
 8001098:	e008      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 800109a:	2305      	movs	r3, #5
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 800109e:	2303      	movs	r3, #3
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x1d8>
 80010aa:	2300      	movs	r3, #0
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	2103      	movs	r1, #3
 80010b0:	400a      	ands	r2, r1
 80010b2:	00d2      	lsls	r2, r2, #3
 80010b4:	4093      	lsls	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010bc:	4936      	ldr	r1, [pc, #216]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3318      	adds	r3, #24
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ca:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	035b      	lsls	r3, r3, #13
 80010e2:	4013      	ands	r3, r2
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43da      	mvns	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	039b      	lsls	r3, r3, #14
 800110c:	4013      	ands	r3, r2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800111e:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 8001120:	2384      	movs	r3, #132	@ 0x84
 8001122:	58d3      	ldr	r3, [r2, r3]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001144:	4914      	ldr	r1, [pc, #80]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 8001146:	2284      	movs	r2, #132	@ 0x84
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800114c:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 800114e:	2380      	movs	r3, #128	@ 0x80
 8001150:	58d3      	ldr	r3, [r2, r3]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	025b      	lsls	r3, r3, #9
 8001166:	4013      	ands	r3, r2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001172:	4909      	ldr	r1, [pc, #36]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	40da      	lsrs	r2, r3
 8001188:	1e13      	subs	r3, r2, #0
 800118a:	d000      	beq.n	800118e <HAL_GPIO_Init+0x2ba>
 800118c:	e6aa      	b.n	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b006      	add	sp, #24
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021800 	.word	0x40021800
 800119c:	50000400 	.word	0x50000400
 80011a0:	50000800 	.word	0x50000800
 80011a4:	50000c00 	.word	0x50000c00
 80011a8:	50001000 	.word	0x50001000

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	0008      	movs	r0, r1
 80011b6:	0011      	movs	r1, r2
 80011b8:	1cbb      	adds	r3, r7, #2
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	1c7b      	adds	r3, r7, #1
 80011c0:	1c0a      	adds	r2, r1, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	1c7b      	adds	r3, r7, #1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011cc:	1cbb      	adds	r3, r7, #2
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d4:	e003      	b.n	80011de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d6:	1cbb      	adds	r3, r7, #2
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e08f      	b.n	800131a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2241      	movs	r2, #65	@ 0x41
 80011fe:	5c9b      	ldrb	r3, [r3, r2]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2240      	movs	r2, #64	@ 0x40
 800120a:	2100      	movs	r1, #0
 800120c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fb4f 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2241      	movs	r2, #65	@ 0x41
 800121a:	2124      	movs	r1, #36	@ 0x24
 800121c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	438a      	bics	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	493b      	ldr	r1, [pc, #236]	@ (8001324 <HAL_I2C_Init+0x13c>)
 8001238:	400a      	ands	r2, r1
 800123a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4938      	ldr	r1, [pc, #224]	@ (8001328 <HAL_I2C_Init+0x140>)
 8001248:	400a      	ands	r2, r1
 800124a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d108      	bne.n	8001266 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	0209      	lsls	r1, r1, #8
 8001260:	430a      	orrs	r2, r1
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	e007      	b.n	8001276 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2184      	movs	r1, #132	@ 0x84
 8001270:	0209      	lsls	r1, r1, #8
 8001272:	430a      	orrs	r2, r1
 8001274:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d109      	bne.n	8001292 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2180      	movs	r1, #128	@ 0x80
 800128a:	0109      	lsls	r1, r1, #4
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	e007      	b.n	80012a2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4923      	ldr	r1, [pc, #140]	@ (800132c <HAL_I2C_Init+0x144>)
 800129e:	400a      	ands	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4920      	ldr	r1, [pc, #128]	@ (8001330 <HAL_I2C_Init+0x148>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	491a      	ldr	r1, [pc, #104]	@ (8001328 <HAL_I2C_Init+0x140>)
 80012be:	400a      	ands	r2, r1
 80012c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69d9      	ldr	r1, [r3, #28]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2101      	movs	r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2241      	movs	r2, #65	@ 0x41
 8001306:	2120      	movs	r1, #32
 8001308:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2242      	movs	r2, #66	@ 0x42
 8001314:	2100      	movs	r1, #0
 8001316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	f0ffffff 	.word	0xf0ffffff
 8001328:	ffff7fff 	.word	0xffff7fff
 800132c:	fffff7ff 	.word	0xfffff7ff
 8001330:	02008000 	.word	0x02008000

08001334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2241      	movs	r2, #65	@ 0x41
 8001342:	5c9b      	ldrb	r3, [r3, r2]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b20      	cmp	r3, #32
 8001348:	d138      	bne.n	80013bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2240      	movs	r2, #64	@ 0x40
 800134e:	5c9b      	ldrb	r3, [r3, r2]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001354:	2302      	movs	r3, #2
 8001356:	e032      	b.n	80013be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2240      	movs	r2, #64	@ 0x40
 800135c:	2101      	movs	r1, #1
 800135e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2241      	movs	r2, #65	@ 0x41
 8001364:	2124      	movs	r1, #36	@ 0x24
 8001366:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2101      	movs	r1, #1
 8001374:	438a      	bics	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4911      	ldr	r1, [pc, #68]	@ (80013c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001384:	400a      	ands	r2, r1
 8001386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6819      	ldr	r1, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2101      	movs	r1, #1
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2241      	movs	r2, #65	@ 0x41
 80013ac:	2120      	movs	r1, #32
 80013ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2240      	movs	r2, #64	@ 0x40
 80013b4:	2100      	movs	r1, #0
 80013b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013bc:	2302      	movs	r3, #2
  }
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	ffffefff 	.word	0xffffefff

080013cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2241      	movs	r2, #65	@ 0x41
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b20      	cmp	r3, #32
 80013e0:	d139      	bne.n	8001456 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2240      	movs	r2, #64	@ 0x40
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e033      	b.n	8001458 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2240      	movs	r2, #64	@ 0x40
 80013f4:	2101      	movs	r1, #1
 80013f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2241      	movs	r2, #65	@ 0x41
 80013fc:	2124      	movs	r1, #36	@ 0x24
 80013fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2241      	movs	r2, #65	@ 0x41
 8001446:	2120      	movs	r1, #32
 8001448:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2240      	movs	r2, #64	@ 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001456:	2302      	movs	r3, #2
  }
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b004      	add	sp, #16
 800145e:	bd80      	pop	{r7, pc}
 8001460:	fffff0ff 	.word	0xfffff0ff

08001464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001472:	4013      	ands	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	429a      	cmp	r2, r3
 8001486:	d11f      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	0013      	movs	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	189b      	adds	r3, r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4912      	ldr	r1, [pc, #72]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001496:	0018      	movs	r0, r3
 8001498:	f7fe fe32 	bl	8000100 <__udivsi3>
 800149c:	0003      	movs	r3, r0
 800149e:	3301      	adds	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a2:	e008      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e001      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e009      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	401a      	ands	r2, r3
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d0ed      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	40007000 	.word	0x40007000
 80014d8:	fffff9ff 	.word	0xfffff9ff
 80014dc:	20000000 	.word	0x20000000
 80014e0:	000f4240 	.word	0x000f4240

080014e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	23e0      	movs	r3, #224	@ 0xe0
 80014ee:	01db      	lsls	r3, r3, #7
 80014f0:	4013      	ands	r3, r2
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e2fe      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2201      	movs	r2, #1
 8001514:	4013      	ands	r3, r2
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x1e>
 8001518:	e07c      	b.n	8001614 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151a:	4bc3      	ldr	r3, [pc, #780]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2238      	movs	r2, #56	@ 0x38
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001524:	4bc0      	ldr	r3, [pc, #768]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b10      	cmp	r3, #16
 8001532:	d102      	bne.n	800153a <HAL_RCC_OscConfig+0x3e>
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d002      	beq.n	8001540 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b08      	cmp	r3, #8
 800153e:	d10b      	bne.n	8001558 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	4bb9      	ldr	r3, [pc, #740]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d062      	beq.n	8001612 <HAL_RCC_OscConfig+0x116>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d15e      	bne.n	8001612 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e2d9      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	025b      	lsls	r3, r3, #9
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x78>
 8001564:	4bb0      	ldr	r3, [pc, #704]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4baf      	ldr	r3, [pc, #700]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800156a:	2180      	movs	r1, #128	@ 0x80
 800156c:	0249      	lsls	r1, r1, #9
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e020      	b.n	80015b6 <HAL_RCC_OscConfig+0xba>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	23a0      	movs	r3, #160	@ 0xa0
 800157a:	02db      	lsls	r3, r3, #11
 800157c:	429a      	cmp	r2, r3
 800157e:	d10e      	bne.n	800159e <HAL_RCC_OscConfig+0xa2>
 8001580:	4ba9      	ldr	r3, [pc, #676]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4ba8      	ldr	r3, [pc, #672]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001586:	2180      	movs	r1, #128	@ 0x80
 8001588:	02c9      	lsls	r1, r1, #11
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	4ba6      	ldr	r3, [pc, #664]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4ba5      	ldr	r3, [pc, #660]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	0249      	lsls	r1, r1, #9
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e00b      	b.n	80015b6 <HAL_RCC_OscConfig+0xba>
 800159e:	4ba2      	ldr	r3, [pc, #648]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	49a1      	ldr	r1, [pc, #644]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	499f      	ldr	r1, [pc, #636]	@ (8001830 <HAL_RCC_OscConfig+0x334>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d014      	beq.n	80015e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff fbb5 	bl	8000d2c <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fbb0 	bl	8000d2c <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	@ 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e298      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015da:	4b93      	ldr	r3, [pc, #588]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	@ 0x80
 80015e0:	029b      	lsls	r3, r3, #10
 80015e2:	4013      	ands	r3, r2
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xcc>
 80015e6:	e015      	b.n	8001614 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fba0 	bl	8000d2c <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f2:	f7ff fb9b 	bl	8000d2c <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b64      	cmp	r3, #100	@ 0x64
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e283      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001604:	4b88      	ldr	r3, [pc, #544]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0xf6>
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d100      	bne.n	8001620 <HAL_RCC_OscConfig+0x124>
 800161e:	e099      	b.n	8001754 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001620:	4b81      	ldr	r3, [pc, #516]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2238      	movs	r2, #56	@ 0x38
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162a:	4b7f      	ldr	r3, [pc, #508]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2203      	movs	r2, #3
 8001630:	4013      	ands	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b10      	cmp	r3, #16
 8001638:	d102      	bne.n	8001640 <HAL_RCC_OscConfig+0x144>
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d002      	beq.n	8001646 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d135      	bne.n	80016b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001646:	4b78      	ldr	r3, [pc, #480]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4013      	ands	r3, r2
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x162>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e256      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b72      	ldr	r3, [pc, #456]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a74      	ldr	r2, [pc, #464]	@ (8001834 <HAL_RCC_OscConfig+0x338>)
 8001664:	4013      	ands	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	021a      	lsls	r2, r3, #8
 800166e:	4b6e      	ldr	r3, [pc, #440]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800167a:	4b6b      	ldr	r3, [pc, #428]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6e      	ldr	r2, [pc, #440]	@ (8001838 <HAL_RCC_OscConfig+0x33c>)
 8001680:	4013      	ands	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	4b67      	ldr	r3, [pc, #412]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800168e:	4b66      	ldr	r3, [pc, #408]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0adb      	lsrs	r3, r3, #11
 8001694:	2207      	movs	r2, #7
 8001696:	4013      	ands	r3, r2
 8001698:	4a68      	ldr	r2, [pc, #416]	@ (800183c <HAL_RCC_OscConfig+0x340>)
 800169a:	40da      	lsrs	r2, r3
 800169c:	4b68      	ldr	r3, [pc, #416]	@ (8001840 <HAL_RCC_OscConfig+0x344>)
 800169e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016a0:	4b68      	ldr	r3, [pc, #416]	@ (8001844 <HAL_RCC_OscConfig+0x348>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fae5 	bl	8000c74 <HAL_InitTick>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d051      	beq.n	8001752 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e22c      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d030      	beq.n	800171c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a5e      	ldr	r2, [pc, #376]	@ (8001838 <HAL_RCC_OscConfig+0x33c>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	4b57      	ldr	r3, [pc, #348]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016ce:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b55      	ldr	r3, [pc, #340]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0049      	lsls	r1, r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb26 	bl	8000d2c <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb21 	bl	8000d2c <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e209      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4013      	ands	r3, r2
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b48      	ldr	r3, [pc, #288]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a4a      	ldr	r2, [pc, #296]	@ (8001834 <HAL_RCC_OscConfig+0x338>)
 800170a:	4013      	ands	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	021a      	lsls	r2, r3, #8
 8001714:	4b44      	ldr	r3, [pc, #272]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	e01b      	b.n	8001754 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800171c:	4b42      	ldr	r3, [pc, #264]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001722:	4949      	ldr	r1, [pc, #292]	@ (8001848 <HAL_RCC_OscConfig+0x34c>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fb00 	bl	8000d2c <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fafb 	bl	8000d2c <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1e3      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001744:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4013      	ands	r3, r2
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x236>
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001752:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2208      	movs	r2, #8
 800175a:	4013      	ands	r3, r2
 800175c:	d047      	beq.n	80017ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800175e:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2238      	movs	r2, #56	@ 0x38
 8001764:	4013      	ands	r3, r2
 8001766:	2b18      	cmp	r3, #24
 8001768:	d10a      	bne.n	8001780 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d03c      	beq.n	80017ee <HAL_RCC_OscConfig+0x2f2>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d138      	bne.n	80017ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e1c5      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d019      	beq.n	80017bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800178a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800178c:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800178e:	2101      	movs	r1, #1
 8001790:	430a      	orrs	r2, r1
 8001792:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff faca 	bl	8000d2c <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fac5 	bl	8000d2c <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1ad      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d0f1      	beq.n	800179e <HAL_RCC_OscConfig+0x2a2>
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80017be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fab0 	bl	8000d2c <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff faab 	bl	8000d2c <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e193      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f1      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	d100      	bne.n	80017fa <HAL_RCC_OscConfig+0x2fe>
 80017f8:	e0c6      	b.n	8001988 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	231f      	movs	r3, #31
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2238      	movs	r2, #56	@ 0x38
 8001808:	4013      	ands	r3, r2
 800180a:	2b20      	cmp	r3, #32
 800180c:	d11e      	bne.n	800184c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x31e>
 8001818:	e0b6      	b.n	8001988 <HAL_RCC_OscConfig+0x48c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d000      	beq.n	8001824 <HAL_RCC_OscConfig+0x328>
 8001822:	e0b1      	b.n	8001988 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e171      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
 8001828:	40021000 	.word	0x40021000
 800182c:	fffeffff 	.word	0xfffeffff
 8001830:	fffbffff 	.word	0xfffbffff
 8001834:	ffff80ff 	.word	0xffff80ff
 8001838:	ffffc7ff 	.word	0xffffc7ff
 800183c:	00f42400 	.word	0x00f42400
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004
 8001848:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800184c:	4bb1      	ldr	r3, [pc, #708]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 800184e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001850:	2380      	movs	r3, #128	@ 0x80
 8001852:	055b      	lsls	r3, r3, #21
 8001854:	4013      	ands	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_RCC_OscConfig+0x360>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x362>
 800185c:	2300      	movs	r3, #0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d011      	beq.n	8001886 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4bac      	ldr	r3, [pc, #688]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001866:	4bab      	ldr	r3, [pc, #684]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	0549      	lsls	r1, r1, #21
 800186c:	430a      	orrs	r2, r1
 800186e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001870:	4ba8      	ldr	r3, [pc, #672]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001872:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	055b      	lsls	r3, r3, #21
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800187e:	231f      	movs	r3, #31
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001886:	4ba4      	ldr	r3, [pc, #656]	@ (8001b18 <HAL_RCC_OscConfig+0x61c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4013      	ands	r3, r2
 8001890:	d11a      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001892:	4ba1      	ldr	r3, [pc, #644]	@ (8001b18 <HAL_RCC_OscConfig+0x61c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4ba0      	ldr	r3, [pc, #640]	@ (8001b18 <HAL_RCC_OscConfig+0x61c>)
 8001898:	2180      	movs	r1, #128	@ 0x80
 800189a:	0049      	lsls	r1, r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa44 	bl	8000d2c <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff fa3f 	bl	8000d2c <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e127      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018bc:	4b96      	ldr	r3, [pc, #600]	@ (8001b18 <HAL_RCC_OscConfig+0x61c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x3e2>
 80018d0:	4b90      	ldr	r3, [pc, #576]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80018d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	430a      	orrs	r2, r1
 80018da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x41c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x404>
 80018e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80018e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80018ec:	2104      	movs	r1, #4
 80018ee:	430a      	orrs	r2, r1
 80018f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018f2:	4b88      	ldr	r3, [pc, #544]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80018f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018f6:	4b87      	ldr	r3, [pc, #540]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x41c>
 8001900:	4b84      	ldr	r3, [pc, #528]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001902:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001904:	4b83      	ldr	r3, [pc, #524]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001906:	2101      	movs	r1, #1
 8001908:	438a      	bics	r2, r1
 800190a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800190c:	4b81      	ldr	r3, [pc, #516]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 800190e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001910:	4b80      	ldr	r3, [pc, #512]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001912:	2104      	movs	r1, #4
 8001914:	438a      	bics	r2, r1
 8001916:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d014      	beq.n	800194a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fa04 	bl	8000d2c <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001928:	e009      	b.n	800193e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff f9ff 	bl	8000d2c <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	4a79      	ldr	r2, [pc, #484]	@ (8001b1c <HAL_RCC_OscConfig+0x620>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0e6      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	4b75      	ldr	r3, [pc, #468]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x42e>
 8001948:	e013      	b.n	8001972 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f9ef 	bl	8000d2c <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001952:	e009      	b.n	8001968 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f9ea 	bl	8000d2c <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4a6f      	ldr	r2, [pc, #444]	@ (8001b1c <HAL_RCC_OscConfig+0x620>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0d1      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001968:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 800196a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196c:	2202      	movs	r2, #2
 800196e:	4013      	ands	r3, r2
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001972:	231f      	movs	r3, #31
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b65      	ldr	r3, [pc, #404]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 800197e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001980:	4b64      	ldr	r3, [pc, #400]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001982:	4967      	ldr	r1, [pc, #412]	@ (8001b20 <HAL_RCC_OscConfig+0x624>)
 8001984:	400a      	ands	r2, r1
 8001986:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d100      	bne.n	8001992 <HAL_RCC_OscConfig+0x496>
 8001990:	e0bb      	b.n	8001b0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001992:	4b60      	ldr	r3, [pc, #384]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2238      	movs	r2, #56	@ 0x38
 8001998:	4013      	ands	r3, r2
 800199a:	2b10      	cmp	r3, #16
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4a4>
 800199e:	e07b      	b.n	8001a98 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d156      	bne.n	8001a56 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b59      	ldr	r3, [pc, #356]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80019ae:	495d      	ldr	r1, [pc, #372]	@ (8001b24 <HAL_RCC_OscConfig+0x628>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f9ba 	bl	8000d2c <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff f9b5 	bl	8000d2c <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e09d      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d0:	4b50      	ldr	r3, [pc, #320]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	049b      	lsls	r3, r3, #18
 80019d8:	4013      	ands	r3, r2
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a51      	ldr	r2, [pc, #324]	@ (8001b28 <HAL_RCC_OscConfig+0x62c>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	4b42      	ldr	r3, [pc, #264]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b40      	ldr	r3, [pc, #256]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b3f      	ldr	r3, [pc, #252]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a16:	2180      	movs	r1, #128	@ 0x80
 8001a18:	0449      	lsls	r1, r1, #17
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4b3c      	ldr	r3, [pc, #240]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a24:	2180      	movs	r1, #128	@ 0x80
 8001a26:	0549      	lsls	r1, r1, #21
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f97e 	bl	8000d2c <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f979 	bl	8000d2c <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e061      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	049b      	lsls	r3, r3, #18
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x53a>
 8001a54:	e059      	b.n	8001b0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b2f      	ldr	r3, [pc, #188]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a5c:	4931      	ldr	r1, [pc, #196]	@ (8001b24 <HAL_RCC_OscConfig+0x628>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f963 	bl	8000d2c <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f95e 	bl	8000d2c <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e046      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	049b      	lsls	r3, r3, #18
 8001a86:	4013      	ands	r3, r2
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a8a:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001a90:	4926      	ldr	r1, [pc, #152]	@ (8001b2c <HAL_RCC_OscConfig+0x630>)
 8001a92:	400a      	ands	r2, r1
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	e038      	b.n	8001b0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e033      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <HAL_RCC_OscConfig+0x618>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2203      	movs	r2, #3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d126      	bne.n	8001b06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2270      	movs	r2, #112	@ 0x70
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11f      	bne.n	8001b06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	23fe      	movs	r3, #254	@ 0xfe
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	401a      	ands	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d116      	bne.n	8001b06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	23f8      	movs	r3, #248	@ 0xf8
 8001adc:	039b      	lsls	r3, r3, #14
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10e      	bne.n	8001b06 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	23e0      	movs	r3, #224	@ 0xe0
 8001aec:	051b      	lsls	r3, r3, #20
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	0f5b      	lsrs	r3, r3, #29
 8001afc:	075a      	lsls	r2, r3, #29
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b008      	add	sp, #32
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	efffffff 	.word	0xefffffff
 8001b24:	feffffff 	.word	0xfeffffff
 8001b28:	11c1808c 	.word	0x11c1808c
 8001b2c:	eefefffc 	.word	0xeefefffc

08001b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0e9      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b76      	ldr	r3, [pc, #472]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d91e      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b73      	ldr	r3, [pc, #460]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2207      	movs	r2, #7
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	4b70      	ldr	r3, [pc, #448]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f8e2 	bl	8000d2c <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f8dd 	bl	8000d2c <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a6a      	ldr	r2, [pc, #424]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0ca      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b82:	4b67      	ldr	r3, [pc, #412]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2207      	movs	r2, #7
 8001b88:	4013      	ands	r3, r2
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1ee      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d015      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d006      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ba4:	4b60      	ldr	r3, [pc, #384]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001baa:	21e0      	movs	r1, #224	@ 0xe0
 8001bac:	01c9      	lsls	r1, r1, #7
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_RCC_ClockConfig+0x1fc>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4b59      	ldr	r3, [pc, #356]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d057      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd8:	4b53      	ldr	r3, [pc, #332]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	4013      	ands	r3, r2
 8001be2:	d12b      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e097      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	049b      	lsls	r3, r3, #18
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d11f      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e08b      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c08:	4b47      	ldr	r3, [pc, #284]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4013      	ands	r3, r2
 8001c12:	d113      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e07f      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c20:	4b41      	ldr	r3, [pc, #260]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e074      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	2202      	movs	r2, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e06d      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2207      	movs	r2, #7
 8001c42:	4393      	bics	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4b37      	ldr	r3, [pc, #220]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c50:	f7ff f86c 	bl	8000d2c <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5a:	f7ff f867 	bl	8000d2c <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a2f      	ldr	r2, [pc, #188]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e054      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2238      	movs	r2, #56	@ 0x38
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1ec      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2207      	movs	r2, #7
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d21e      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2207      	movs	r2, #7
 8001c94:	4393      	bics	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f844 	bl	8000d2c <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001caa:	f7ff f83f 	bl	8000d2c <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e02c      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cbe:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <HAL_RCC_ClockConfig+0x200>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cea:	f000 f829 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cee:	0001      	movs	r1, r0
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_RCC_ClockConfig+0x204>)
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	58d3      	ldr	r3, [r2, r3]
 8001d00:	221f      	movs	r2, #31
 8001d02:	4013      	ands	r3, r2
 8001d04:	000a      	movs	r2, r1
 8001d06:	40da      	lsrs	r2, r3
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_RCC_ClockConfig+0x208>)
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_RCC_ClockConfig+0x20c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7fe ffaf 	bl	8000c74 <HAL_InitTick>
 8001d16:	0003      	movs	r3, r0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b004      	add	sp, #16
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40022000 	.word	0x40022000
 8001d24:	00001388 	.word	0x00001388
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	fffff0ff 	.word	0xfffff0ff
 8001d30:	ffff8fff 	.word	0xffff8fff
 8001d34:	08002e80 	.word	0x08002e80
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d46:	4b3c      	ldr	r3, [pc, #240]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2238      	movs	r2, #56	@ 0x38
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d10f      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d50:	4b39      	ldr	r3, [pc, #228]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0adb      	lsrs	r3, r3, #11
 8001d56:	2207      	movs	r2, #7
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	0013      	movs	r3, r2
 8001d60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	4835      	ldr	r0, [pc, #212]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d66:	f7fe f9cb 	bl	8000100 <__udivsi3>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e05d      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d70:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2238      	movs	r2, #56	@ 0x38
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	e054      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d82:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2238      	movs	r2, #56	@ 0x38
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d138      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2203      	movs	r2, #3
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d98:	4b27      	ldr	r3, [pc, #156]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	2207      	movs	r2, #7
 8001da0:	4013      	ands	r3, r2
 8001da2:	3301      	adds	r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d10d      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	4824      	ldr	r0, [pc, #144]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001db0:	f7fe f9a6 	bl	8000100 <__udivsi3>
 8001db4:	0003      	movs	r3, r0
 8001db6:	0019      	movs	r1, r3
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	227f      	movs	r2, #127	@ 0x7f
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	434b      	muls	r3, r1
 8001dc4:	617b      	str	r3, [r7, #20]
        break;
 8001dc6:	e00d      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	481c      	ldr	r0, [pc, #112]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dcc:	f7fe f998 	bl	8000100 <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	227f      	movs	r2, #127	@ 0x7f
 8001ddc:	4013      	ands	r3, r2
 8001dde:	434b      	muls	r3, r1
 8001de0:	617b      	str	r3, [r7, #20]
        break;
 8001de2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001de4:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0f5b      	lsrs	r3, r3, #29
 8001dea:	2207      	movs	r2, #7
 8001dec:	4013      	ands	r3, r2
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	6978      	ldr	r0, [r7, #20]
 8001df6:	f7fe f983 	bl	8000100 <__udivsi3>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e00:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2238      	movs	r2, #56	@ 0x38
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d103      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2238      	movs	r2, #56	@ 0x38
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b18      	cmp	r3, #24
 8001e1e:	d103      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e20:	23fa      	movs	r3, #250	@ 0xfa
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e001      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e2c:	693b      	ldr	r3, [r7, #16]
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b006      	add	sp, #24
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b02      	ldr	r3, [pc, #8]	@ (8001e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	20000000 	.word	0x20000000

08001e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e5c:	f7ff fff2 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e60:	0004      	movs	r4, r0
 8001e62:	f7ff fb3f 	bl	80014e4 <LL_RCC_GetAPB1Prescaler>
 8001e66:	0003      	movs	r3, r0
 8001e68:	0b1a      	lsrs	r2, r3, #12
 8001e6a:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	58d3      	ldr	r3, [r2, r3]
 8001e70:	221f      	movs	r2, #31
 8001e72:	4013      	ands	r3, r2
 8001e74:	40dc      	lsrs	r4, r3
 8001e76:	0023      	movs	r3, r4
}
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	08002ec0 	.word	0x08002ec0

08001e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e8c:	2313      	movs	r3, #19
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e94:	2312      	movs	r3, #18
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ea8:	e0a3      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2011      	movs	r0, #17
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4bb0      	ldr	r3, [pc, #704]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	055b      	lsls	r3, r3, #21
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d110      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4bad      	ldr	r3, [pc, #692]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec2:	4bac      	ldr	r3, [pc, #688]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec4:	2180      	movs	r1, #128	@ 0x80
 8001ec6:	0549      	lsls	r1, r1, #21
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ecc:	4ba9      	ldr	r3, [pc, #676]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	055b      	lsls	r3, r3, #21
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	183b      	adds	r3, r7, r0
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee0:	4ba5      	ldr	r3, [pc, #660]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4ba4      	ldr	r3, [pc, #656]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ee6:	2180      	movs	r1, #128	@ 0x80
 8001ee8:	0049      	lsls	r1, r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eee:	f7fe ff1d 	bl	8000d2c <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7fe ff18 	bl	8000d2c <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d904      	bls.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f06:	2313      	movs	r3, #19
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	701a      	strb	r2, [r3, #0]
        break;
 8001f0e:	e005      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f10:	4b99      	ldr	r3, [pc, #612]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d0ed      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f1c:	2313      	movs	r3, #19
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d154      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f26:	4b93      	ldr	r3, [pc, #588]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f2a:	23c0      	movs	r3, #192	@ 0xc0
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d019      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d014      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f42:	4b8c      	ldr	r3, [pc, #560]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	4a8d      	ldr	r2, [pc, #564]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f4c:	4b89      	ldr	r3, [pc, #548]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f50:	4b88      	ldr	r3, [pc, #544]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f52:	2180      	movs	r1, #128	@ 0x80
 8001f54:	0249      	lsls	r1, r1, #9
 8001f56:	430a      	orrs	r2, r1
 8001f58:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5a:	4b86      	ldr	r3, [pc, #536]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f5e:	4b85      	ldr	r3, [pc, #532]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f60:	4987      	ldr	r1, [pc, #540]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f66:	4b83      	ldr	r3, [pc, #524]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe feda 	bl	8000d2c <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7c:	e00c      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7fe fed5 	bl	8000d2c <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a7e      	ldr	r2, [pc, #504]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d904      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f8e:	2313      	movs	r3, #19
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2203      	movs	r2, #3
 8001f94:	701a      	strb	r2, [r3, #0]
            break;
 8001f96:	e004      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f98:	4b76      	ldr	r3, [pc, #472]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d0ed      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001fa2:	2313      	movs	r3, #19
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fac:	4b71      	ldr	r3, [pc, #452]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	4a72      	ldr	r2, [pc, #456]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fba:	4b6e      	ldr	r3, [pc, #440]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fc0:	e00c      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fc2:	2312      	movs	r3, #18
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2213      	movs	r2, #19
 8001fc8:	18ba      	adds	r2, r7, r2
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e005      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2213      	movs	r2, #19
 8001fd6:	18ba      	adds	r2, r7, r2
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fdc:	2311      	movs	r3, #17
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b63      	ldr	r3, [pc, #396]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fea:	4b62      	ldr	r3, [pc, #392]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fec:	4966      	ldr	r1, [pc, #408]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fee:	400a      	ands	r2, r1
 8001ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ffc:	4b5d      	ldr	r3, [pc, #372]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	2203      	movs	r2, #3
 8002002:	4393      	bics	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4b5a      	ldr	r3, [pc, #360]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800200c:	430a      	orrs	r2, r1
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800201a:	4b56      	ldr	r3, [pc, #344]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	220c      	movs	r2, #12
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b52      	ldr	r3, [pc, #328]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800202a:	430a      	orrs	r2, r1
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2204      	movs	r2, #4
 8002034:	4013      	ands	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002038:	4b4e      	ldr	r3, [pc, #312]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	2230      	movs	r2, #48	@ 0x30
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002048:	430a      	orrs	r2, r1
 800204a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2220      	movs	r2, #32
 8002052:	4013      	ands	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002056:	4b47      	ldr	r3, [pc, #284]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	4a4c      	ldr	r2, [pc, #304]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	4b43      	ldr	r3, [pc, #268]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002066:	430a      	orrs	r2, r1
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002074:	4b3f      	ldr	r3, [pc, #252]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	4a45      	ldr	r2, [pc, #276]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	4b3c      	ldr	r3, [pc, #240]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002084:	430a      	orrs	r2, r1
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	01db      	lsls	r3, r3, #7
 8002090:	4013      	ands	r3, r2
 8002092:	d015      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002094:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	0899      	lsrs	r1, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	4b34      	ldr	r3, [pc, #208]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	2380      	movs	r3, #128	@ 0x80
 80020ac:	05db      	lsls	r3, r3, #23
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b8:	2180      	movs	r1, #128	@ 0x80
 80020ba:	0249      	lsls	r1, r1, #9
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4013      	ands	r3, r2
 80020ca:	d014      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	2203      	movs	r2, #3
 80020d2:	4393      	bics	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020e8:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ee:	2180      	movs	r1, #128	@ 0x80
 80020f0:	0249      	lsls	r1, r1, #9
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	4013      	ands	r3, r2
 8002100:	d014      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002102:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	220c      	movs	r2, #12
 8002108:	4393      	bics	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002112:	430a      	orrs	r2, r1
 8002114:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b04      	cmp	r3, #4
 800211c:	d106      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002124:	2180      	movs	r1, #128	@ 0x80
 8002126:	0249      	lsls	r1, r1, #9
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	045b      	lsls	r3, r3, #17
 8002134:	4013      	ands	r3, r2
 8002136:	d016      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002138:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	4a13      	ldr	r2, [pc, #76]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002148:	430a      	orrs	r2, r1
 800214a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0449      	lsls	r1, r1, #17
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002166:	2312      	movs	r3, #18
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b006      	add	sp, #24
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
 800217c:	fffffcff 	.word	0xfffffcff
 8002180:	fffeffff 	.word	0xfffeffff
 8002184:	00001388 	.word	0x00001388
 8002188:	efffffff 	.word	0xefffffff
 800218c:	ffffcfff 	.word	0xffffcfff
 8002190:	ffff3fff 	.word	0xffff3fff

08002194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0a8      	b.n	80022f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	2382      	movs	r3, #130	@ 0x82
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d009      	beq.n	80021ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	61da      	str	r2, [r3, #28]
 80021c0:	e005      	b.n	80021ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	225d      	movs	r2, #93	@ 0x5d
 80021d8:	5c9b      	ldrb	r3, [r3, r2]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	225c      	movs	r2, #92	@ 0x5c
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fe fbdc 	bl	80009a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	225d      	movs	r2, #93	@ 0x5d
 80021f4:	2102      	movs	r1, #2
 80021f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2140      	movs	r1, #64	@ 0x40
 8002204:	438a      	bics	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	23e0      	movs	r3, #224	@ 0xe0
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	429a      	cmp	r2, r3
 8002212:	d902      	bls.n	800221a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e002      	b.n	8002220 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	015b      	lsls	r3, r3, #5
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	23f0      	movs	r3, #240	@ 0xf0
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	429a      	cmp	r2, r3
 800222a:	d008      	beq.n	800223e <HAL_SPI_Init+0xaa>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	23e0      	movs	r3, #224	@ 0xe0
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	429a      	cmp	r2, r3
 8002236:	d002      	beq.n	800223e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	2382      	movs	r3, #130	@ 0x82
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	2384      	movs	r3, #132	@ 0x84
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	400b      	ands	r3, r1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2102      	movs	r1, #2
 800225a:	400b      	ands	r3, r1
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	2101      	movs	r1, #1
 8002264:	400b      	ands	r3, r1
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6999      	ldr	r1, [r3, #24]
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	400b      	ands	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2138      	movs	r1, #56	@ 0x38
 800227a:	400b      	ands	r3, r1
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	2180      	movs	r1, #128	@ 0x80
 8002284:	400b      	ands	r3, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	0011      	movs	r1, r2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	019b      	lsls	r3, r3, #6
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	2204      	movs	r2, #4
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	2110      	movs	r1, #16
 80022ac:	400b      	ands	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b4:	2108      	movs	r1, #8
 80022b6:	400b      	ands	r3, r1
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68d9      	ldr	r1, [r3, #12]
 80022be:	23f0      	movs	r3, #240	@ 0xf0
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	0011      	movs	r1, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	401a      	ands	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4907      	ldr	r1, [pc, #28]	@ (8002300 <HAL_SPI_Init+0x16c>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	225d      	movs	r2, #93	@ 0x5d
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	fffff7ff 	.word	0xfffff7ff

08002304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e046      	b.n	80023a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2288      	movs	r2, #136	@ 0x88
 800231a:	589b      	ldr	r3, [r3, r2]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2284      	movs	r2, #132	@ 0x84
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0018      	movs	r0, r3
 800232c:	f7fe fbd8 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2288      	movs	r2, #136	@ 0x88
 8002334:	2124      	movs	r1, #36	@ 0x24
 8002336:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	438a      	bics	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fa0e 	bl	8002774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f828 	bl	80023b0 <UART_SetConfig>
 8002360:	0003      	movs	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e01c      	b.n	80023a4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	490d      	ldr	r1, [pc, #52]	@ (80023ac <HAL_UART_Init+0xa8>)
 8002376:	400a      	ands	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	212a      	movs	r1, #42	@ 0x2a
 8002386:	438a      	bics	r2, r1
 8002388:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fa9d 	bl	80028dc <UART_CheckIdleState>
 80023a2:	0003      	movs	r3, r0
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	ffffb7ff 	.word	0xffffb7ff

080023b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023b8:	231b      	movs	r3, #27
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4ab4      	ldr	r2, [pc, #720]	@ (80026b0 <UART_SetConfig+0x300>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4aaf      	ldr	r2, [pc, #700]	@ (80026b4 <UART_SetConfig+0x304>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	4313      	orrs	r3, r2
 8002414:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4aa6      	ldr	r2, [pc, #664]	@ (80026b8 <UART_SetConfig+0x308>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	220f      	movs	r2, #15
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a9c      	ldr	r2, [pc, #624]	@ (80026bc <UART_SetConfig+0x30c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d127      	bne.n	800249e <UART_SetConfig+0xee>
 800244e:	4b9c      	ldr	r3, [pc, #624]	@ (80026c0 <UART_SetConfig+0x310>)
 8002450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002452:	2203      	movs	r2, #3
 8002454:	4013      	ands	r3, r2
 8002456:	2b03      	cmp	r3, #3
 8002458:	d017      	beq.n	800248a <UART_SetConfig+0xda>
 800245a:	d81b      	bhi.n	8002494 <UART_SetConfig+0xe4>
 800245c:	2b02      	cmp	r3, #2
 800245e:	d00a      	beq.n	8002476 <UART_SetConfig+0xc6>
 8002460:	d818      	bhi.n	8002494 <UART_SetConfig+0xe4>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <UART_SetConfig+0xbc>
 8002466:	2b01      	cmp	r3, #1
 8002468:	d00a      	beq.n	8002480 <UART_SetConfig+0xd0>
 800246a:	e013      	b.n	8002494 <UART_SetConfig+0xe4>
 800246c:	231a      	movs	r3, #26
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e08f      	b.n	8002596 <UART_SetConfig+0x1e6>
 8002476:	231a      	movs	r3, #26
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e08a      	b.n	8002596 <UART_SetConfig+0x1e6>
 8002480:	231a      	movs	r3, #26
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2204      	movs	r2, #4
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e085      	b.n	8002596 <UART_SetConfig+0x1e6>
 800248a:	231a      	movs	r3, #26
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	2208      	movs	r2, #8
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e080      	b.n	8002596 <UART_SetConfig+0x1e6>
 8002494:	231a      	movs	r3, #26
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2210      	movs	r2, #16
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e07b      	b.n	8002596 <UART_SetConfig+0x1e6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a88      	ldr	r2, [pc, #544]	@ (80026c4 <UART_SetConfig+0x314>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d127      	bne.n	80024f8 <UART_SetConfig+0x148>
 80024a8:	4b85      	ldr	r3, [pc, #532]	@ (80026c0 <UART_SetConfig+0x310>)
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	220c      	movs	r2, #12
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d017      	beq.n	80024e4 <UART_SetConfig+0x134>
 80024b4:	d81b      	bhi.n	80024ee <UART_SetConfig+0x13e>
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d00a      	beq.n	80024d0 <UART_SetConfig+0x120>
 80024ba:	d818      	bhi.n	80024ee <UART_SetConfig+0x13e>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <UART_SetConfig+0x116>
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00a      	beq.n	80024da <UART_SetConfig+0x12a>
 80024c4:	e013      	b.n	80024ee <UART_SetConfig+0x13e>
 80024c6:	231a      	movs	r3, #26
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e062      	b.n	8002596 <UART_SetConfig+0x1e6>
 80024d0:	231a      	movs	r3, #26
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e05d      	b.n	8002596 <UART_SetConfig+0x1e6>
 80024da:	231a      	movs	r3, #26
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e058      	b.n	8002596 <UART_SetConfig+0x1e6>
 80024e4:	231a      	movs	r3, #26
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2208      	movs	r2, #8
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e053      	b.n	8002596 <UART_SetConfig+0x1e6>
 80024ee:	231a      	movs	r3, #26
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2210      	movs	r2, #16
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e04e      	b.n	8002596 <UART_SetConfig+0x1e6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a72      	ldr	r2, [pc, #456]	@ (80026c8 <UART_SetConfig+0x318>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d127      	bne.n	8002552 <UART_SetConfig+0x1a2>
 8002502:	4b6f      	ldr	r3, [pc, #444]	@ (80026c0 <UART_SetConfig+0x310>)
 8002504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002506:	2230      	movs	r2, #48	@ 0x30
 8002508:	4013      	ands	r3, r2
 800250a:	2b30      	cmp	r3, #48	@ 0x30
 800250c:	d017      	beq.n	800253e <UART_SetConfig+0x18e>
 800250e:	d81b      	bhi.n	8002548 <UART_SetConfig+0x198>
 8002510:	2b20      	cmp	r3, #32
 8002512:	d00a      	beq.n	800252a <UART_SetConfig+0x17a>
 8002514:	d818      	bhi.n	8002548 <UART_SetConfig+0x198>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <UART_SetConfig+0x170>
 800251a:	2b10      	cmp	r3, #16
 800251c:	d00a      	beq.n	8002534 <UART_SetConfig+0x184>
 800251e:	e013      	b.n	8002548 <UART_SetConfig+0x198>
 8002520:	231a      	movs	r3, #26
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e035      	b.n	8002596 <UART_SetConfig+0x1e6>
 800252a:	231a      	movs	r3, #26
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	e030      	b.n	8002596 <UART_SetConfig+0x1e6>
 8002534:	231a      	movs	r3, #26
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2204      	movs	r2, #4
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e02b      	b.n	8002596 <UART_SetConfig+0x1e6>
 800253e:	231a      	movs	r3, #26
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	2208      	movs	r2, #8
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e026      	b.n	8002596 <UART_SetConfig+0x1e6>
 8002548:	231a      	movs	r3, #26
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2210      	movs	r2, #16
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e021      	b.n	8002596 <UART_SetConfig+0x1e6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <UART_SetConfig+0x31c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d104      	bne.n	8002566 <UART_SetConfig+0x1b6>
 800255c:	231a      	movs	r3, #26
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e017      	b.n	8002596 <UART_SetConfig+0x1e6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a59      	ldr	r2, [pc, #356]	@ (80026d0 <UART_SetConfig+0x320>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d104      	bne.n	800257a <UART_SetConfig+0x1ca>
 8002570:	231a      	movs	r3, #26
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e00d      	b.n	8002596 <UART_SetConfig+0x1e6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a55      	ldr	r2, [pc, #340]	@ (80026d4 <UART_SetConfig+0x324>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d104      	bne.n	800258e <UART_SetConfig+0x1de>
 8002584:	231a      	movs	r3, #26
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	e003      	b.n	8002596 <UART_SetConfig+0x1e6>
 800258e:	231a      	movs	r3, #26
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2210      	movs	r2, #16
 8002594:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	429a      	cmp	r2, r3
 80025a0:	d000      	beq.n	80025a4 <UART_SetConfig+0x1f4>
 80025a2:	e065      	b.n	8002670 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 80025a4:	231a      	movs	r3, #26
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d015      	beq.n	80025da <UART_SetConfig+0x22a>
 80025ae:	dc18      	bgt.n	80025e2 <UART_SetConfig+0x232>
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d00d      	beq.n	80025d0 <UART_SetConfig+0x220>
 80025b4:	dc15      	bgt.n	80025e2 <UART_SetConfig+0x232>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <UART_SetConfig+0x210>
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d005      	beq.n	80025ca <UART_SetConfig+0x21a>
 80025be:	e010      	b.n	80025e2 <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c0:	f7ff fc4a 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 80025c4:	0003      	movs	r3, r0
 80025c6:	617b      	str	r3, [r7, #20]
        break;
 80025c8:	e012      	b.n	80025f0 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025ca:	4b43      	ldr	r3, [pc, #268]	@ (80026d8 <UART_SetConfig+0x328>)
 80025cc:	617b      	str	r3, [r7, #20]
        break;
 80025ce:	e00f      	b.n	80025f0 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025d0:	f7ff fbb6 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80025d4:	0003      	movs	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]
        break;
 80025d8:	e00a      	b.n	80025f0 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	617b      	str	r3, [r7, #20]
        break;
 80025e0:	e006      	b.n	80025f0 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025e6:	231b      	movs	r3, #27
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
        break;
 80025ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d100      	bne.n	80025f8 <UART_SetConfig+0x248>
 80025f6:	e0a6      	b.n	8002746 <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fc:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <UART_SetConfig+0x32c>)
 80025fe:	0052      	lsls	r2, r2, #1
 8002600:	5ad3      	ldrh	r3, [r2, r3]
 8002602:	0019      	movs	r1, r3
 8002604:	6978      	ldr	r0, [r7, #20]
 8002606:	f7fd fd7b 	bl	8000100 <__udivsi3>
 800260a:	0003      	movs	r3, r0
 800260c:	005a      	lsls	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	18d2      	adds	r2, r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0019      	movs	r1, r3
 800261c:	0010      	movs	r0, r2
 800261e:	f7fd fd6f 	bl	8000100 <__udivsi3>
 8002622:	0003      	movs	r3, r0
 8002624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d91c      	bls.n	8002666 <UART_SetConfig+0x2b6>
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	025b      	lsls	r3, r3, #9
 8002632:	429a      	cmp	r2, r3
 8002634:	d217      	bcs.n	8002666 <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	b29a      	uxth	r2, r3
 800263a:	200e      	movs	r0, #14
 800263c:	183b      	adds	r3, r7, r0
 800263e:	210f      	movs	r1, #15
 8002640:	438a      	bics	r2, r1
 8002642:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	b29b      	uxth	r3, r3
 800264a:	2207      	movs	r2, #7
 800264c:	4013      	ands	r3, r2
 800264e:	b299      	uxth	r1, r3
 8002650:	183b      	adds	r3, r7, r0
 8002652:	183a      	adds	r2, r7, r0
 8002654:	8812      	ldrh	r2, [r2, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	183a      	adds	r2, r7, r0
 8002660:	8812      	ldrh	r2, [r2, #0]
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	e06f      	b.n	8002746 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8002666:	231b      	movs	r3, #27
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e06a      	b.n	8002746 <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002670:	231a      	movs	r3, #26
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b08      	cmp	r3, #8
 8002678:	d015      	beq.n	80026a6 <UART_SetConfig+0x2f6>
 800267a:	dc31      	bgt.n	80026e0 <UART_SetConfig+0x330>
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00d      	beq.n	800269c <UART_SetConfig+0x2ec>
 8002680:	dc2e      	bgt.n	80026e0 <UART_SetConfig+0x330>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <UART_SetConfig+0x2dc>
 8002686:	2b02      	cmp	r3, #2
 8002688:	d005      	beq.n	8002696 <UART_SetConfig+0x2e6>
 800268a:	e029      	b.n	80026e0 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800268c:	f7ff fbe4 	bl	8001e58 <HAL_RCC_GetPCLK1Freq>
 8002690:	0003      	movs	r3, r0
 8002692:	617b      	str	r3, [r7, #20]
        break;
 8002694:	e02b      	b.n	80026ee <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <UART_SetConfig+0x328>)
 8002698:	617b      	str	r3, [r7, #20]
        break;
 800269a:	e028      	b.n	80026ee <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269c:	f7ff fb50 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80026a0:	0003      	movs	r3, r0
 80026a2:	617b      	str	r3, [r7, #20]
        break;
 80026a4:	e023      	b.n	80026ee <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	617b      	str	r3, [r7, #20]
        break;
 80026ac:	e01f      	b.n	80026ee <UART_SetConfig+0x33e>
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	cfff69f3 	.word	0xcfff69f3
 80026b4:	ffffcfff 	.word	0xffffcfff
 80026b8:	11fff4ff 	.word	0x11fff4ff
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40004400 	.word	0x40004400
 80026c8:	40004800 	.word	0x40004800
 80026cc:	40004c00 	.word	0x40004c00
 80026d0:	40005000 	.word	0x40005000
 80026d4:	40013c00 	.word	0x40013c00
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	08002ee0 	.word	0x08002ee0
      default:
        pclk = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80026e4:	231b      	movs	r3, #27
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
        break;
 80026ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d028      	beq.n	8002746 <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <UART_SetConfig+0x3c0>)
 80026fa:	0052      	lsls	r2, r2, #1
 80026fc:	5ad3      	ldrh	r3, [r2, r3]
 80026fe:	0019      	movs	r1, r3
 8002700:	6978      	ldr	r0, [r7, #20]
 8002702:	f7fd fcfd 	bl	8000100 <__udivsi3>
 8002706:	0003      	movs	r3, r0
 8002708:	001a      	movs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	18d2      	adds	r2, r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0019      	movs	r1, r3
 8002718:	0010      	movs	r0, r2
 800271a:	f7fd fcf1 	bl	8000100 <__udivsi3>
 800271e:	0003      	movs	r3, r0
 8002720:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d90a      	bls.n	800273e <UART_SetConfig+0x38e>
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	025b      	lsls	r3, r3, #9
 800272e:	429a      	cmp	r2, r3
 8002730:	d205      	bcs.n	800273e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	e003      	b.n	8002746 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 800273e:	231b      	movs	r3, #27
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	226a      	movs	r2, #106	@ 0x6a
 800274a:	2101      	movs	r1, #1
 800274c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2268      	movs	r2, #104	@ 0x68
 8002752:	2101      	movs	r1, #1
 8002754:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002762:	231b      	movs	r3, #27
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	781b      	ldrb	r3, [r3, #0]
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b008      	add	sp, #32
 800276e:	bd80      	pop	{r7, pc}
 8002770:	08002ee0 	.word	0x08002ee0

08002774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	2208      	movs	r2, #8
 8002782:	4013      	ands	r3, r2
 8002784:	d00b      	beq.n	800279e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a4a      	ldr	r2, [pc, #296]	@ (80028b8 <UART_AdvFeatureConfig+0x144>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	2201      	movs	r2, #1
 80027a4:	4013      	ands	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a43      	ldr	r2, [pc, #268]	@ (80028bc <UART_AdvFeatureConfig+0x148>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	2202      	movs	r2, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d00b      	beq.n	80027e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a3b      	ldr	r2, [pc, #236]	@ (80028c0 <UART_AdvFeatureConfig+0x14c>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d00b      	beq.n	8002804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a34      	ldr	r2, [pc, #208]	@ (80028c4 <UART_AdvFeatureConfig+0x150>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	2210      	movs	r2, #16
 800280a:	4013      	ands	r3, r2
 800280c:	d00b      	beq.n	8002826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a2c      	ldr	r2, [pc, #176]	@ (80028c8 <UART_AdvFeatureConfig+0x154>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	2220      	movs	r2, #32
 800282c:	4013      	ands	r3, r2
 800282e:	d00b      	beq.n	8002848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4a25      	ldr	r2, [pc, #148]	@ (80028cc <UART_AdvFeatureConfig+0x158>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	2240      	movs	r2, #64	@ 0x40
 800284e:	4013      	ands	r3, r2
 8002850:	d01d      	beq.n	800288e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a1d      	ldr	r2, [pc, #116]	@ (80028d0 <UART_AdvFeatureConfig+0x15c>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	035b      	lsls	r3, r3, #13
 8002872:	429a      	cmp	r2, r3
 8002874:	d10b      	bne.n	800288e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <UART_AdvFeatureConfig+0x160>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	4013      	ands	r3, r2
 8002896:	d00b      	beq.n	80028b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a0e      	ldr	r2, [pc, #56]	@ (80028d8 <UART_AdvFeatureConfig+0x164>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
  }
}
 80028b0:	46c0      	nop			@ (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	ffff7fff 	.word	0xffff7fff
 80028bc:	fffdffff 	.word	0xfffdffff
 80028c0:	fffeffff 	.word	0xfffeffff
 80028c4:	fffbffff 	.word	0xfffbffff
 80028c8:	ffffefff 	.word	0xffffefff
 80028cc:	ffffdfff 	.word	0xffffdfff
 80028d0:	ffefffff 	.word	0xffefffff
 80028d4:	ff9fffff 	.word	0xff9fffff
 80028d8:	fff7ffff 	.word	0xfff7ffff

080028dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b092      	sub	sp, #72	@ 0x48
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2290      	movs	r2, #144	@ 0x90
 80028e8:	2100      	movs	r1, #0
 80028ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028ec:	f7fe fa1e 	bl	8000d2c <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2208      	movs	r2, #8
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d12d      	bne.n	800295e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	0391      	lsls	r1, r2, #14
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4a47      	ldr	r2, [pc, #284]	@ (8002a28 <UART_CheckIdleState+0x14c>)
 800290c:	9200      	str	r2, [sp, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	f000 f88e 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d022      	beq.n	800295e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002918:	f3ef 8310 	mrs	r3, PRIMASK
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002920:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002922:	2301      	movs	r3, #1
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2180      	movs	r1, #128	@ 0x80
 800293a:	438a      	bics	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002944:	f383 8810 	msr	PRIMASK, r3
}
 8002948:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2288      	movs	r2, #136	@ 0x88
 800294e:	2120      	movs	r1, #32
 8002950:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2284      	movs	r2, #132	@ 0x84
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e060      	b.n	8002a20 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2204      	movs	r2, #4
 8002966:	4013      	ands	r3, r2
 8002968:	2b04      	cmp	r3, #4
 800296a:	d146      	bne.n	80029fa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800296c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	03d1      	lsls	r1, r2, #15
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <UART_CheckIdleState+0x14c>)
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	f000 f859 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d03b      	beq.n	80029fa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002982:	f3ef 8310 	mrs	r3, PRIMASK
 8002986:	60fb      	str	r3, [r7, #12]
  return(result);
 8002988:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
 800298c:	2301      	movs	r3, #1
 800298e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4922      	ldr	r1, [pc, #136]	@ (8002a2c <UART_CheckIdleState+0x150>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f383 8810 	msr	PRIMASK, r3
}
 80029b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b4:	f3ef 8310 	mrs	r3, PRIMASK
 80029b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80029ba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	438a      	bics	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	f383 8810 	msr	PRIMASK, r3
}
 80029e4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	228c      	movs	r2, #140	@ 0x8c
 80029ea:	2120      	movs	r1, #32
 80029ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2284      	movs	r2, #132	@ 0x84
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e012      	b.n	8002a20 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2288      	movs	r2, #136	@ 0x88
 80029fe:	2120      	movs	r1, #32
 8002a00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	228c      	movs	r2, #140	@ 0x8c
 8002a06:	2120      	movs	r1, #32
 8002a08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2284      	movs	r2, #132	@ 0x84
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b010      	add	sp, #64	@ 0x40
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	01ffffff 	.word	0x01ffffff
 8002a2c:	fffffedf 	.word	0xfffffedf

08002a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a40:	e051      	b.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3301      	adds	r3, #1
 8002a46:	d04e      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7fe f970 	bl	8000d2c <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e051      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d03b      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b80      	cmp	r3, #128	@ 0x80
 8002a72:	d038      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b40      	cmp	r3, #64	@ 0x40
 8002a78:	d035      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2208      	movs	r2, #8
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d111      	bne.n	8002aac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f83c 	bl	8002b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2290      	movs	r2, #144	@ 0x90
 8002a9c:	2108      	movs	r1, #8
 8002a9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2284      	movs	r2, #132	@ 0x84
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e02c      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d112      	bne.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2280      	movs	r2, #128	@ 0x80
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 f81f 	bl	8002b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2290      	movs	r2, #144	@ 0x90
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2284      	movs	r2, #132	@ 0x84
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e00f      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	425a      	negs	r2, r3
 8002af6:	4153      	adcs	r3, r2
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	001a      	movs	r2, r3
 8002afc:	1dfb      	adds	r3, r7, #7
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d09e      	beq.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	@ 0x38
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b18:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f383 8810 	msr	PRIMASK, r3
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4926      	ldr	r1, [pc, #152]	@ (8002bd4 <UART_EndRxTransfer+0xc4>)
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f383 8810 	msr	PRIMASK, r3
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b4e:	623b      	str	r3, [r7, #32]
  return(result);
 8002b50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b52:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b54:	2301      	movs	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	f383 8810 	msr	PRIMASK, r3
}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	491b      	ldr	r1, [pc, #108]	@ (8002bd8 <UART_EndRxTransfer+0xc8>)
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b76:	f383 8810 	msr	PRIMASK, r3
}
 8002b7a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d118      	bne.n	8002bb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b84:	f3ef 8310 	mrs	r3, PRIMASK
 8002b88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8e:	2301      	movs	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f383 8810 	msr	PRIMASK, r3
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f383 8810 	msr	PRIMASK, r3
}
 8002bb4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	228c      	movs	r2, #140	@ 0x8c
 8002bba:	2120      	movs	r1, #32
 8002bbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b00e      	add	sp, #56	@ 0x38
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	fffffedf 	.word	0xfffffedf
 8002bd8:	effffffe 	.word	0xeffffffe

08002bdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2284      	movs	r2, #132	@ 0x84
 8002be8:	5c9b      	ldrb	r3, [r3, r2]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e027      	b.n	8002c42 <HAL_UARTEx_DisableFifoMode+0x66>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2284      	movs	r2, #132	@ 0x84
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2288      	movs	r2, #136	@ 0x88
 8002bfe:	2124      	movs	r1, #36	@ 0x24
 8002c00:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	438a      	bics	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_UARTEx_DisableFifoMode+0x70>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2288      	movs	r2, #136	@ 0x88
 8002c34:	2120      	movs	r1, #32
 8002c36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2284      	movs	r2, #132	@ 0x84
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b004      	add	sp, #16
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	dfffffff 	.word	0xdfffffff

08002c50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2284      	movs	r2, #132	@ 0x84
 8002c5e:	5c9b      	ldrb	r3, [r3, r2]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e02e      	b.n	8002cc6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2284      	movs	r2, #132	@ 0x84
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2288      	movs	r2, #136	@ 0x88
 8002c74:	2124      	movs	r1, #36	@ 0x24
 8002c76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	08d9      	lsrs	r1, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 f854 	bl	8002d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2288      	movs	r2, #136	@ 0x88
 8002cb8:	2120      	movs	r1, #32
 8002cba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2284      	movs	r2, #132	@ 0x84
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b004      	add	sp, #16
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2284      	movs	r2, #132	@ 0x84
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e02f      	b.n	8002d48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2284      	movs	r2, #132	@ 0x84
 8002cec:	2101      	movs	r1, #1
 8002cee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2288      	movs	r2, #136	@ 0x88
 8002cf4:	2124      	movs	r1, #36	@ 0x24
 8002cf6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4a0e      	ldr	r2, [pc, #56]	@ (8002d50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 f813 	bl	8002d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2288      	movs	r2, #136	@ 0x88
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2284      	movs	r2, #132	@ 0x84
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	f1ffffff 	.word	0xf1ffffff

08002d54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d108      	bne.n	8002d76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	226a      	movs	r2, #106	@ 0x6a
 8002d68:	2101      	movs	r1, #1
 8002d6a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2268      	movs	r2, #104	@ 0x68
 8002d70:	2101      	movs	r1, #1
 8002d72:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d74:	e043      	b.n	8002dfe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d76:	260f      	movs	r6, #15
 8002d78:	19bb      	adds	r3, r7, r6
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d7e:	200e      	movs	r0, #14
 8002d80:	183b      	adds	r3, r7, r0
 8002d82:	2208      	movs	r2, #8
 8002d84:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	0e5b      	lsrs	r3, r3, #25
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	240d      	movs	r4, #13
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	2107      	movs	r1, #7
 8002d96:	400a      	ands	r2, r1
 8002d98:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	0f5b      	lsrs	r3, r3, #29
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	250c      	movs	r5, #12
 8002da6:	197b      	adds	r3, r7, r5
 8002da8:	2107      	movs	r1, #7
 8002daa:	400a      	ands	r2, r1
 8002dac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002dae:	183b      	adds	r3, r7, r0
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	197a      	adds	r2, r7, r5
 8002db4:	7812      	ldrb	r2, [r2, #0]
 8002db6:	4914      	ldr	r1, [pc, #80]	@ (8002e08 <UARTEx_SetNbDataToProcess+0xb4>)
 8002db8:	5c8a      	ldrb	r2, [r1, r2]
 8002dba:	435a      	muls	r2, r3
 8002dbc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002dbe:	197b      	adds	r3, r7, r5
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4a12      	ldr	r2, [pc, #72]	@ (8002e0c <UARTEx_SetNbDataToProcess+0xb8>)
 8002dc4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	f7fd fa24 	bl	8000214 <__divsi3>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	b299      	uxth	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	226a      	movs	r2, #106	@ 0x6a
 8002dd4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dd6:	19bb      	adds	r3, r7, r6
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	193a      	adds	r2, r7, r4
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	490a      	ldr	r1, [pc, #40]	@ (8002e08 <UARTEx_SetNbDataToProcess+0xb4>)
 8002de0:	5c8a      	ldrb	r2, [r1, r2]
 8002de2:	435a      	muls	r2, r3
 8002de4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002de6:	193b      	adds	r3, r7, r4
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	4a08      	ldr	r2, [pc, #32]	@ (8002e0c <UARTEx_SetNbDataToProcess+0xb8>)
 8002dec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dee:	0019      	movs	r1, r3
 8002df0:	f7fd fa10 	bl	8000214 <__divsi3>
 8002df4:	0003      	movs	r3, r0
 8002df6:	b299      	uxth	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2268      	movs	r2, #104	@ 0x68
 8002dfc:	5299      	strh	r1, [r3, r2]
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b005      	add	sp, #20
 8002e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	08002ef8 	.word	0x08002ef8
 8002e0c:	08002f00 	.word	0x08002f00

08002e10 <memset>:
 8002e10:	0003      	movs	r3, r0
 8002e12:	1882      	adds	r2, r0, r2
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d100      	bne.n	8002e1a <memset+0xa>
 8002e18:	4770      	bx	lr
 8002e1a:	7019      	strb	r1, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	e7f9      	b.n	8002e14 <memset+0x4>

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2600      	movs	r6, #0
 8002e24:	4c0c      	ldr	r4, [pc, #48]	@ (8002e58 <__libc_init_array+0x38>)
 8002e26:	4d0d      	ldr	r5, [pc, #52]	@ (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1b64      	subs	r4, r4, r5
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	2600      	movs	r6, #0
 8002e32:	f000 f819 	bl	8002e68 <_init>
 8002e36:	4c0a      	ldr	r4, [pc, #40]	@ (8002e60 <__libc_init_array+0x40>)
 8002e38:	4d0a      	ldr	r5, [pc, #40]	@ (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	00b3      	lsls	r3, r6, #2
 8002e46:	58eb      	ldr	r3, [r5, r3]
 8002e48:	4798      	blx	r3
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	00b3      	lsls	r3, r6, #2
 8002e50:	58eb      	ldr	r3, [r5, r3]
 8002e52:	4798      	blx	r3
 8002e54:	3601      	adds	r6, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	08002f08 	.word	0x08002f08
 8002e5c:	08002f08 	.word	0x08002f08
 8002e60:	08002f0c 	.word	0x08002f0c
 8002e64:	08002f08 	.word	0x08002f08

08002e68 <_init>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr

08002e74 <_fini>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr
